package com.radium.crm{
	import air.update.ApplicationUpdaterUI;	import air.update.events.UpdateEvent;		import com.radium.crm.events.WindowEvent;	import com.radium.crm.model.Constants;	import com.radium.crm.model.ContentModel;	import com.radium.crm.model.vo.CredentialsVO;	import com.radium.crm.model.vo.DeviceInfoVO;	import com.radium.crm.model.vo.UserVO;	import com.radium.crm.signals.* ;	import com.radium.crm.utils.ConnectionMonitor;	import com.radium.crm.utils.SyncMonitor;		import flash.desktop.NativeApplication;	import flash.desktop.SystemTrayIcon;	import flash.display.BitmapData;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.NativeWindow;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NativeWindowDisplayStateEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;		import mx.collections.ArrayCollection;		import org.robotlegs.mvcs.Mediator;		/**	 * Mediator for the main application.	 */
	public class ApplicationMediator extends Mediator	{		[Inject]		public var application:Main ;				[Inject]		public var startupSignal:StartupSignal ;				[Inject]		public var configurationLoadedSignal:ConfigurationLoadedSignal ;				[Inject]		public var loadCredentialsSignal:LoadCredentialsSignal ;				[Inject]		public var credentialsFailedSignal:CredentialsFailedSignal ;				[Inject]		public var loadSettingsSignal:LoadSettingsSignal ;				[Inject]		public var settingsLoadedSignal:SettingsLoadedSignal ;				[Inject]		public var authenticationStartSignal:AuthenticateSignal ;				[Inject]		public var authenticationSuccessSignal:AuthenticationSuccessSignal ;				[Inject]		public var loggedOutSignal:LoggedOutSignal ;				[Inject]		public var loginErrorSignal:AuthenticationErrorSignal ;				[Inject]		public var logCallsSignal:LogCallsSignal ;				[Inject]		public var loadHistorySignal:LoadHistorySignal ;				[Inject]		public var versionUpdateSignal:VersionUpdateSignal ;		[Inject]		public var loadContactsSignal:LoadContactsSignal ;				[Inject]		public var saveSettingsSignal:SaveSettingsSignal ;				[Inject]		public var showPrivacyInfoSignal:ShowPrivacyInfoSignal ;				[Inject]		public var selectPhoneSignal:SelectPhoneSignal ;				[Inject]		public var phoneSelectedSignal:PhoneSelectedSignal ;				[Inject]		public var model:ContentModel ;				[Inject]		public var syncMonitor:SyncMonitor ;				[Inject]		public var connectionMonitor:ConnectionMonitor ;				private var _appUpdater:ApplicationUpdaterUI ;		// PUBLIC METHODS				override public function onRegister( ):void		{			application.addEventListener( WindowEvent.MINIMIZE, minimizeHandler ) ;						// add listeners			credentialsFailedSignal.add( credentialsFailedHandler ) ;			settingsLoadedSignal.add( settingsLoadedHandler ) ;			authenticationStartSignal.add( authenticationStartHandler ) ;			authenticationSuccessSignal.add( authenticationSuccessHandler ) ;			showPrivacyInfoSignal.add( application.showPrivacyView ) ;			loggedOutSignal.add( loggedOutHandler ) ;			loginErrorSignal.add( loginErrorHandler ) ;			selectPhoneSignal.add( selectPhoneHandler ) ;			phoneSelectedSignal.add( phoneSelectedHandler ) ;						startupSignal.dispatch( ) ;			connectionMonitor.init( ) ;						// autodock the application unless it's being launched for the first time			if( !model.firstTimeUser && model.settings.runOnStartup ) application.autoDock( ) ;		}				// PRIVATE METHODS				/**		 * Sets the auto updater.		 */				private function setUpdater( ):void		{			trace( "ApplicationMediator.setUpdater" ) ;			setApplicationVersion( ) ;			_appUpdater = new ApplicationUpdaterUI( ) ;            _appUpdater.updateURL = Constants.VERSION_FILE_URL ;             _appUpdater.isCheckForUpdateVisible = false ; 			_appUpdater.isInstallUpdateVisible = false ;			_appUpdater.isDownloadUpdateVisible = false ;			_appUpdater.isFileUpdateVisible = false ;			_appUpdater.isDownloadProgressVisible = false ;			_appUpdater.delay = 1 ; // the number of days between update checks			            _appUpdater.addEventListener( UpdateEvent.INITIALIZED, updateHandler ) ;             _appUpdater.addEventListener( ErrorEvent.ERROR, updateErrorHandler ) ;             if( model.settings.autoUpdate ) _appUpdater.initialize( ) ;		}				 private function setApplicationVersion( ):void 		 {            var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor ;            var ns:Namespace = appXML.namespace( ) ;        }				// EVENT HANDLERS		 		/**		 * Takes the user to the signup view if existing credentials can't be found.		 */		private function credentialsFailedHandler( ):void		{			application.showSignupView( ) ;		}						private function settingsLoadedHandler( ):void		{			//setUpdater( ) ;		}				/**		 * Displays the loader animation while the user authentication is in progress.		 * @param credentials	The current user credentials		 */				private function authenticationStartHandler( credentials:CredentialsVO ):void		{			application.showLoaderView( ) ;		}				/**		 * Initializes the sync monitor and loads the sync history and contact file after a successful authentication.		 * @param user	The logged in user		 */				private function authenticationSuccessHandler( user:UserVO ):void		{			trace( "ApplicationMediator.authenticationSuccessHandler" ) ;			syncMonitor.init( ) ;			loadHistorySignal.dispatch( ) ;			loadContactsSignal.dispatch( ) ;		}				/**		 * Takes the user back to the signup screen once they have been logged out.		 */				private function loggedOutHandler( ):void		{			application.showSignupView( ) ;		}				private function minimizeHandler( e:WindowEvent ):void		{			application.dock( ) ;		}				/**		 * Undocks the application when an error has occurred.		 */				private function loginErrorHandler( ):void		{			application.showLoginError( ) ;			application.undock( ) ;		}				/**		 * Checks for updates		 */				private function updateHandler( e:UpdateEvent ):void		{			trace( "ApplicationMediator.updateHandler" ) ;			_appUpdater.checkNow( ) ;		}				/**		 * Update failed - take no action for now.		 */				private function updateErrorHandler( e:ErrorEvent ):void		{			trace( "UPDATE ERROR" ) ;		}				/**		 * Prompts the user for a selection if multiple devices have been detected.		 * @param devices	An ArrayCollection containing all the detected devices		 */				private function selectPhoneHandler( devices:ArrayCollection ):void		{			application.showPhoneSelectionView( devices ) ;		}				/**		 * Once the user has selected a device, take them either to the privacy info or the main screen depending		 * on whether or not they're a first time user.		 * @param device	The selected device		 */				private function phoneSelectedHandler( device:DeviceInfoVO ):void		{			if( model.firstTimeUser ) application.showPrivacyView( ) ;			else application.showMainView( ) ;		}			}}
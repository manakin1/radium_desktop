package com.radium.crm.controller.commands{		import com.adobe.air.filesystem.FileMonitor;
	import com.adobe.air.filesystem.events.FileMonitorEvent;
	import com.radium.crm.model.Constants;
	import com.radium.crm.model.ContentModel;
	import com.radium.crm.model.vo.ContactVO;
	import com.radium.crm.signals.LoadContactsSignal;
	import com.radium.crm.utils.ErrorManager;
	import com.radium.crm.utils.VOParser;
	
	import flash.data.SQLConnection;
	import flash.data.SQLStatement;
	import flash.filesystem.File;
	import flash.system.Capabilities;
	import flash.utils.Dictionary;
	
	import org.robotlegs.mvcs.SignalCommand;		/**	 * Loads the iTunes contact file.	 */
	 	public class LoadContactsCommand extends SignalCommand	{				[Inject]		public var model:ContentModel ;				[Inject]		public var errorManager:ErrorManager ;				[Inject]		public var loadContactsSignal:LoadContactsSignal ;				private var _monitor:FileMonitor ;		private var _numberIndex:Dictionary ;		override public function execute( ):void		{			getNumberIndex( ) ;						try			{				// contact file found				var file:File = model.contactFile ;								monitorChanges( ) ;								if( !file ) return ;				if( !file.exists ) return ;								var success:Boolean ;				var conn:SQLConnection = new SQLConnection( ) ;				var statement:SQLStatement = new SQLStatement( ) ;								conn.open( file ) ;				model.contactFile = file ;							statement.sqlConnection = conn ;				statement.text = "SELECT ROWID, First, Last FROM ABPerson" ;				statement.execute( ) ;				success = true ;			}						catch( e:Error )			{				// failed to load contacts; the file does not exist				success = false ;				trace( "ERROR LOADING CONTACTS:", e.message ) ;			}						if( !success ) return ;						var contacts:Dictionary = new Dictionary( ) ;			var result:Array = statement.getResult( ).data ;						for each( var obj:Object in result )			{				var contact:ContactVO = VOParser.parseContact( obj ) ;				contact.number = _numberIndex[ obj[ "ROWID" ] ] ;				contacts[ contact.id ] = contact ;			}						model.contacts = contacts ;		}				// PRIVATE METHODS				/**		 * Sets the FileMonitor to detect any changes to the contact file		 */				private function monitorChanges( ):void		{			if( _monitor ) return ;						_monitor = new FileMonitor( ) ;			_monitor.addEventListener( FileMonitorEvent.CHANGE, fileChangeHandler ) ;			_monitor.file = model.contactFile ;			_monitor.watch( ) ;		}				private function getNumberIndex( ):void		{			try			{				// contact file found				var file:File = model.contactFile ;				monitorChanges( ) ;								if( !file ) return ;				if( !file.exists ) return ;								var success:Boolean ;				var conn:SQLConnection = new SQLConnection( ) ;				var statement:SQLStatement = new SQLStatement( ) ;								conn.open( file ) ;				model.contactFile = file ;								statement.sqlConnection = conn ;				statement.text = "SELECT * FROM ABMultiValue" ;				statement.execute( ) ;				success = true ;			}						catch( e:Error )			{				// failed to load contacts; the file does not exist				success = false ;				trace( "ERROR LOADING CONTACTS:", e.message ) ;			}						if( !success ) return ;			var result:Array = statement.getResult( ).data ;			_numberIndex = new Dictionary( ) ;						for each( var obj:Object in result )			{				if( obj.value != null && !isNaN( obj.value ) )				_numberIndex[ obj[ "record_id" ] ] = obj.value ;			}		}				// EVENT HANDLERS						/**		 * Reloads the contact file when a change is detected.		 */				private function fileChangeHandler( e:FileMonitorEvent ):void		{			loadContactsSignal.dispatch( ) ;		}			}}